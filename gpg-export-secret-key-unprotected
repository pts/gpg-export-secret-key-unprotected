#! /bin/sh
#
# gpg-export-secret-key-unprotected: Export a GPG secret key, removing passphrase protection.
# by pts@fazekas.hu at Mon Apr 27 19:18:23 CEST 2020
#
# This shell script exports a single GPG secret key and its subkeys in
# `gpg --export-secret-key' packet format, but without passphrase protection.
# If the secret key is passphrase-protected, this shell script asks for the
# passphrase on the terminal, runs GPG to temporarily decrypt the secret
# key, and exports the unprotected (unencrypted) secret key. Both GPG 1.x
# and 2.x are supported, tested with GPG 1.4.16, 2.1.18 and 2.2.19.
#
# How it works: It creates a temporary .gnupg directory, copies over the
# protected secret key, calls `gpg --passwd' (or `gpg --edit-key', if the
# former is not supported) to remove the passphrase, exports the
# now-unprotected secret key, and finally deletes the temporary directory.
#
# According to https://stackoverflow.com/a/46130560/ , it doesn't
# work with GPG 2.1.0--2.1.13. Earlier and newer versions should work.
#

die() {
  echo "${0##*/}: fatal: $*" >&2
  exit 2
}

main() {
  if test $# = 0 || test "$1" = --help; then
    echo "gpg-export-secret-key-unprotected: Export a GPG secret key, removing passphrase protection.
This is free software, GNU GPL >=2.0. There is NO WARRANTY. Use at your risk.
Usage: $0 [<gpg-flag>...] <key>
Example <gpg-flag>: --armor" >&1
    exit 1
  fi

  # Tested with GPG 2.1.18.
  # !! TODO(pts): Test it with GPG 2.2.
  for ARG in "$@"; do
    KEY="$ARG"
  done
  # GPG 1.4.16 reports: `gpg: Invalid option "--with-keygrip"'.
  KEYCOLONS="$(gpg --with-colon --list-keys "$KEY")"
  test "$?" = 0 || die "gpg error, key not found: $KEY"
  PUBCOUNT="$(echo "$KEYCOLONS" | awk 'BEGIN{s=0}/^pub:/{s+=1}END{print s}')"
  test "$?" = 0 || die "awk failed"
  test "$PUBCOUNT" || die "awk failed to print"
  test "$PUBCOUNT" = 0 && die "key not found: $KEY"
  test "$PUBCOUNT" = 1 || die "multiple keys found: $KEY"

  # GPG 1.4.16 fails for both `--pinentry-mode loopback' and `--with-keygrip'.
  OUT="$(gpg --pinentry-mode loopback --with-keygrip --version 2>/dev/null)"
  if test "$OUT"; then
    GPGV=2
    PEML='--pinentry-mode loopback'
  else
    OUT="$(gpg --version 2>/dev/null)"
    test "$OUT" || die "gpg version detection failed"
    GPGV=1
    PEML=''
  fi

  # In GPG 2.1.18, if the key is passphrase-protected, then `gpg
  # --export-secret-key' below fails with the error message: `gpg: Sorry, we
  # are in batchmode - can't get input'. In GPG 1.4.16, it succeeds for both
  # protected and unprotected keys.
  #
  # We have to pass `$PEML' for GPG 2.1.18 here, otherwise it tries to
  # ask for a passphrase.
  OUT="$(gpg $PEML --batch --armor --export-secret-key "$KEY")"
  if test "$?" = 0 && test "$OUT"; then
    # For GPG 1.4.16, we reach this even if the key is protected.
    OUT="$(echo "$OUT" | gpg --list-packets | awk '/^\tprotect /{s=1}END{print s}')"
    if test "$OUT" != 1; then
      gpg $PEML --batch --export-secret-key "$@"
      return
    fi
  fi

  if test "$GPGV" = 2; then
    # Check availability of keygrip files.
    KEYCOLONGS="$(gpg --with-colon --with-keygrip --list-keys "$KEY")"
    GRPS="$(echo "$KEYCOLONGS" | awk -F: '$1=="grp"&&$10!=""{print$10}')"
    test "$?" = 0 || die "awk failed"
    GRPCOUNT="$(echo "$GRPS" | awk 'BEGIN{s=0}{s+=1}END{print s}')"
    test "$?" = 0 || die "awk failed"
    KEYCOUNT="$(echo "$KEYCOLONGS" | awk 'BEGIN{s=0}/^pub:/||/^sub:/{s+=1}END{print s}')"
    test "$?" = 0 || die "awk failed"
    test "$GRPCOUNT" = "$KEYCOUNT" || die "keygrip mismatch: key_count=$KEYCOUNT keygrip_count=$GRPCOUNT"
    for GRP in $GRPS; do
      GRPF="$HOME/.gnupg/private-keys-v1.d/$GRP.key"
      test -f "$GRPF" || die "keygrip file not found (do you have only the public key?): $GRPF"
      OUT="$(<"$GRPF" LC_CTYPE=C awk '{s=1}END{print s}')"
      test "$?" = 0 || die "keygrip file not readable: $GRPF"
      test "$OUT" = 1 || die "keygrip file empty: $GRPF"
      OUT="$(<"$GRPF" LC_CTYPE=C awk '/^Key: [(]protected-private-key/||/^Key: [(]private-key/||/^[(]21:protected-private-key[(]/||/^[(]11:private-key[(]/{s=1}END{print s}')"
      test "$?" = 0 || die "awk failed for keygrip file: $GRPF"
      # This happens e.g. if the private key is on a smartcard (e.g.
      # `shadowed-private-key').
      test "$OUT" = 1 || die "missing private key data in keygrip file: $GRPF"
    done
  fi

  # Create temporary directory.
  test "$USER" || USER="$(id -nu)"
  TMPDIR="${TMPDIR:-/tmp}"
  THDIR="$TMPDIR/gpgexport.$USER.$$"
  test "${THDIR#/}" = "$THDIR" && THDIR="./$THDIR"
  rm -rf "$THDIR"
  mkdir "$THDIR" || die "mkdir failed for: $THDIR"
  ECHOTRAPCMD=:
  trap '$ECHOTRAPCMD; rm -rf "$THDIR"' exit
  chmod 700 "$THDIR" || die "chmod failed"

  if test "$GPGV" = 1; then
    # Copy secret key packets (including subkeys) including protected secret
    # keys to $THDIR.
    gpg --batch --export "$KEY" >"$THDIR/pubring.gpg" || die "gpg export failed"
    gpg --batch --export-secret-key "$KEY" >"$THDIR/secring.gpg" || die "gpg export-secret-key failed"

    # Read passphrase.
    echo -n "Passphrase for gpg key $KEY: " >&2
    OUT=""
    P=""
    # In pdksh 46, `read -s' doesn't disable the echo. So we don't even try.
    test "$KSH_VERSION" || OUT="$(read -s P 2>&1 && echo ----good---- && echo "$P")"
    P="${OUT#----good----
}"
    if test "$P" = "$OUT"; then  # No `read -s'. Example: dash.
      # https://stackoverflow.com/a/28393320
      P=""
      stty -echo >&2 || die "stty failed"
      ECHOTRAPCMD='stty echo >&2'
      read P || die "passphrase read failed"
      echo >&2  # Terminate line.
      stty echo >&2 || die "stty failed"
      ECHOTRAPCMD=':'  # Don't run `stty echo' on exit.
    fi
    test "$P" || die "empty passphrase, aborting"
    # Upon a wrong passphrase, GPG 1.4.16 still succeeds, and prints this twice:
    # `gpg: Invalid passphrase; please try again ...'. This is hardcoded to the
    # check_secret_key function.
    echo "$P







y
save" |
    gpg --homedir "$THDIR" --no-use-agent --expert --command-fd 0 --yes --no-tty --no-greeting --quiet --edit-key "$KEY" passwd ||
        die "gpg edit-key failed"  # This doesn't trigger with GPG 1.4.16.
  fi

  if test "$GPGV" = 2; then
    # Copy public key packets (including subkeys) and keygrip files to $THDIR.
    gpg --batch --export "$KEY" >"$THDIR/pubring.gpg" || die "gpg export failed"
    mkdir "$THDIR"/private-keys-v1.d || die "mkdir private-keys failed"
    for GRP in $GRPS; do
      GRPF="$HOME/.gnupg/private-keys-v1.d/$GRP.key"
      GRPG="$THDIR/private-keys-v1.d/$GRP.key"
      cat <"$GRPF" >"$GRPG" || die "error copying keygrip file: $GRPF"
    done

    # Change key passphrase to empty in temporary directory.
    #
    # TODO(pts): Report key UID in addition to $KEY etc.
    echo "0. Wait for the passphrase prompt below." >&2
    echo "1. Type the old passphrase for key $KEY, press <Enter>." >&2
    echo "2. If asked for the passphrase again, just press <Enter> (once or twice)." >&2
    gpg --homedir "$THDIR" --pinentry-mode loopback --no-greeting --passwd "$KEY"
    for GRP in $GRPS; do
      GRPF="$THDIR/private-keys-v1.d/$GRP.key"
      OUT="$(<"$GRPF" LC_CTYPE=C awk 'BEGIN{s=t=0}/^Key: [(]protected-private-key/||/^[(]21:protected-private-key[(]/{s=1}/^Key: [(]private-key/||/^[(]11:private-key[(]/{t=2}END{print s+t}')"
      test "$?" = 0 || die "awk failed for keygrip file: $GRPF"
      test "$OUT" || die "empty awk output"
      test "$OUT" = 0 && die "no secret key in keygrip file: $GRPF"
      test "$OUT" = 2 || die "key passphrase change failed (wrong passphrase?)"
    done
  fi

  OUT="$(gpg --homedir "$THDIR" $PEML --batch --armor --export-secret-key "$KEY")"
  test "$?" = 0 || die "gpg export-secret-key failed"
  test "$OUT" || die "empty gpg export-secret-key output"
  OUT="$(echo "$OUT" | gpg --list-packets | awk '/^\tprotect /{s=1}END{print s}')"
  test "$OUT" = 1 && die "gpg key is still protected: $KEY"
  # Run it again so that the the trailing \n is not removed.
  gpg --homedir "$THDIR" $PEML --batch --export-secret-key "$@"
}

main "$@"
